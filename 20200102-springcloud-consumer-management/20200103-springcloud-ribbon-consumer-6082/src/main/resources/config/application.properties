server.port=6082
server.servlet.context-path=/

# consumer是否需要去eureka中注册信息？不需要
eureka.client.register-with-eureka=false
eureka.client.service-url.defaultZone=http://eureka01:7081/eureka,http://eureka02:7082/eureka,http://eureka03:7083/eureka

# 既然ribbon实现整体的负载均衡的时候，需要脱离eureka，标识了整个项目中ribbon就不能再继续去加载eureka
# ribbon.eureka.enabled=false
# 也就是说consumer就不能继续从eureka中发现服务了
# 那也就意味着需要把所有的provider全部声明出来8081,8082,8083
# 所以consumer在脱离eureka去调用provider的时候，必须要指定provider的地址以及端口号
# 语法规定:开头必须以spring.application.name的值开始
# 必须先要找到provider的spring.application.name的值
# book-provider.ribbon.listOfServers=localhost:8081,localhost:8082,localhost:8083
# 必须要规定ribbon负载均衡所支持的策略(默认8种) Clazz<?> xxx = Class.forName("com.aaa.lee.xxx");
# book-provider.ribbon.NFLoadBalancerRuleClassName=com.netflix.loadbalancer.RandomRule
